1. Swap 2 numbers without temp variable

    Approach: A,B
              A = A+B
              B = A-B
              A = A-B

2. Sort the HashMap based on the values

    Approach:map.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);

3. We have N number of tickets each have source and destination, which DS will help to find the start and end place

4. What is the Diff between NetConf and RestConf
    NetConf is StateFull and more into Configuration where RestConf is stateLess and more into handling web request
    like GET,POST,PUT,DELETE and PATCH

5. What is Must , When and Unique in YANG file.
    In YANG, the must statement is used to define constraints on data nodes using XPath expressions. These constraints must evaluate to true for the data to be considered valid. Here's a basic example to illustrate how the must statement works:

    module example-module {
        namespace "http://example.com/example-module";
        prefix "ex";

        container example-container {
            leaf example-leaf {
                type string;
                must "string-length(.) >= 5" {
                    error-message "The string length must be at least 5 characters.";
                }
            }
        }
    }

    In YANG, the when statement is used to conditionally include or exclude a data node based on an XPath expression. This means that the data node will only be present if the condition specified in the when statement evaluates to true

    In YANG, ensuring uniqueness within a list can be achieved using the key statement. The key statement specifies one or more leafs that uniquely identify list entries.
    key "username email";

 6. Why GNMI is efitient for telemetry over SNMP protocol
    gNMI uses a streaming protocol to collect data, which is more efficient than SNMP's polling-based approach. This reduces the load on network devices and allows for real-time data collection
    gNMI supports sustained streaming connections, allowing network devices to continuously send updates to the client. This is in contrast to SNMP, which typically uses a request/response pattern

 7. What are Microservices design patterns?

 8. Find the most repeated Letter in a String?
    String S = "KAJAVALI"
    System.out.println(S.chars().mapToObj(c->(char)c).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey());

 9. String S = "145628";
    output: Thread-1:1
            Thread-4:4
            Thread-5:5 etc
    String K = "145628";
            K.chars().map(Character::getNumericValue).forEach(n->{
                Thread T = new Thread(()->{
                    System.out.println(Thread.currentThread().getName()+":"+n);
                });
                T.setName("Thread-"+n);
                T.start();
            });
 10. OutPut: Thread-1:1
             Thread-2:2
             Thread-3:3
             Thread-1:4
             Thread-2:5 etc
 11. LinkedList Implementaion

 12. When we will get ConcurrentModificationException

 13. Create custom SingleTon class with 5 Instances

 14. Merge 2 sorted arrays

 15. Find max element from the array

 16. What is Circute breaker pattern

 17. What is Choriograpy and Orchestartion

 18. What are SOLID principle
    The SOLID principles are a set of five design principles in object-oriented programming that help create more understandable, flexible, and maintainable software
    Single Responsibility Principle (SRP): A class should have only one reason to change, meaning it should have only one job or responsibility. This helps in making the class more cohesive and easier to maintain1.

    Open/Closed Principle (OCP): Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. This means you should be able to add new functionality without changing existing code2.

    Liskov Substitution Principle (LSP): Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program. This ensures that a subclass can stand in for its superclass2.

    Interface Segregation Principle (ISP): Clients should not be forced to depend on interfaces they do not use. This means creating smaller, more specific interfaces rather than one large, general-purpose interface2.

    Dependency Inversion Principle (DIP): High-level modules should not depend on low-level modules. Both should depend on abstractions. Additionally, abstractions should not depend on details. Details should depend on abstractions2.

  19. Gesss the output:
        public class Dummy {
            public static void main(String[] args) {
                String str = "Java123";
                String str1 = "Java";

                System.out.println(str.compareTo(str1));//3
                System.out.println(str1.compareTo(str));//-3

            }
        }

  20. Output of:
        public interface A {
            default void sum() {
                System.out.println(1 + 2);
            }
        }
        public interface B {
            default void sum() {
                System.out.println(3*20);
            }
        }
        public class Test3 implements A, B {
            public static void main(String[] args){
                Test3 t= new Test3();
                t.sum();
            }
        }

        //if you want to call inetrface A - sum method
            A.super.sum();
 21 How to connet DB in Springboot application
    application.properties file with the db driver details ,user,pass,dielect,
    @Entity
    class User{}
    public interface UserRepository extends JpaRepository<User, Long> {
    }

    @Service
    class userService{
        @Autowired
        private UserRepository userRepository;
    }

    @RestController
    @RequestMapping("/users")
    public class UserController {
        @Autowired
        private UserService userService;

 22. How to read properties file values in springboot
     @Value("${data.user}") for individual properties

     Using @ConfigurationProperties: For more complex configurations, you can use the @ConfigurationProperties annotation to bind a group of properties to a POJO.
     @Configuration
     @ConfigurationProperties(prefix = "my")
     public class MyProperties {}

     @Component
     public class MyComponent {

     @Autowired
     private Environment env;

     public void printProperty() {
         String myProperty = env.getProperty("my.property");
         System.out.println("Property value: " + myProperty);
     }

23. How to avoid a class from @Autowired in springboot

    Ensure that the class is not annotated with @Component, @Service, @Repository,
    or any other stereotype annotations that make it a Spring-managed bean

    Exclude the Class from Component Scanning:
    excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = MyClass.class))

24. Write string polyndrom program

25. Implement stack push , pop, peek methods

26. What is composition and aggregation
    Composition
    Definition: Composition is a strong form of association where the child object cannot exist independently of the parent object. If the parent object is destroyed, the child objects are also destroyed.
    Example: A House and its Rooms. If the House is destroyed, the Rooms no longer exist.

    Aggregation
    Definition: Aggregation is a weaker form of association where the child object can exist independently of the parent object. The parent and child have their own life cycles.
    Example: A Library and Books. If the Library is destroyed, the Books can still exist.

 27. How state data maintained in ReactJs
     Component State: Best for local state within a single component.
     Context API: Useful for sharing state across multiple components without prop drilling.
     State Management Libraries: Ideal for complex state management needs across large applications.

 28. Life cycle methods of ReatJs
     1. Mounting
     2. Updating
     3. UnMounting

 29. What is the diff between ReactJs and Native React ?
     ReactJS is ideal for building web applications with a focus on creating dynamic and interactive user interfaces.
     React Native is designed for building cross-platform mobile applications that provide a native look and feel.

 30. How to do Athentication and Authorization in Springboot
        @Configuration
        @EnableWebSecurity
        public class SecurityConfig extends WebSecurityConfigurerAdapter {

            @Override
            protected void configure(AuthenticationManagerBuilder auth) throws Exception {
                auth.inMemoryAuthentication()
                    .withUser("user")
                    .password(passwordEncoder().encode("password"))
                    .roles("USER");
            }

            @Override
            protected void configure(HttpSecurity http) throws Exception {
                http
                    .authorizeRequests()
                    .anyRequest().authenticated()
                    .and()
                    .httpBasic();
            }

            @Bean
            public PasswordEncoder passwordEncoder() {
                return new BCryptPasswordEncoder();
            }
        }

 31. What are the roles available in Springboot
    ADMIN: Full access to all resources and operations.
    USER: Access to general user functionalities.
    MODERATOR: Manages content or user interactions.
    GUEST: Limited access to public or read-only resources.

    @Secured("ROLE_USER") //class
    @RolesAllowed("ROLE_ADMIN")//Method


    @Configuration
    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                .authorizeRequests()
                    .antMatchers("/admin/**").hasRole("ADMIN")
                    .antMatchers("/user/**").hasRole("USER")
                    .antMatchers("/public/**").permitAll()
                    .anyRequest().authenticated()
                .and()
                .formLogin()
                    .loginPage("/login")
                    .permitAll()
                .and()
                .logout()
                    .permitAll();
        }
    }

 32. How to mock static method in Junit
    mockito-inline

    public class StaticUtils {
        public static String getVal() {
            return "foo";
        }
    }

    public class StaticUtilsTest {

        @Test
        void testGetVal() {
            // Outside the mock scope
            assertEquals("foo", StaticUtils.getVal());

            // Mocking the static method
            try (MockedStatic<StaticUtils> mockedStatic = mockStatic(StaticUtils.class)) {
                mockedStatic.when(StaticUtils::getVal).thenReturn("bar");

                // Inside the mock scope
                assertEquals("bar", StaticUtils.getVal());
            }

            // Outside the mock scope again
            assertEquals("foo", StaticUtils.getVal());
        }
    }

    Add Dependencies: Ensure you have the mockito-inline dependency.
    Create Static Method: Define a class with a static method to be mocked.
    Mock Static Method: Use MockedStatic to mock the static method within a try-with-resources block.
    This ensures the mock is only active within the block and the static method returns to its original behavior afterward.

    Mockito: Starting from version 3.4.0, Mockito supports mocking static methods directly using the mockito-inline module12.
    Scoped Mocking: Use MockedStatic within a try-with-resources block to ensure the mock is scoped and does not affect other tests.

 33. What is annonimus inner class

 34. What is cachedThreadPool

 35. what is Completable in java 8

 36. List<Student> studentList = new ArrayList<Student>();
     List<Department> departmentList = new ArrayList<Department>();
     class Student {
        Integer id;
        String name ;
        List<Integer> deptIds;
     }
     class Department {
     Integer departmentId;
        String deptName;
     }
     // All the departments with atleast two students

 37. What is circuteBreaker and how to implement this

 38. What if @Scope("Singleton") has @Scope("prototype") reforence?

    It will work if we go with MethodInjection and @Lookup and ObjectFactory

 40. int[] A = {1,2,3,5} find the missing number
 41.Find the second hiehest salary with streams
    List<Employee> employeeList = new ArrayList<>();
            employeeList.add(new Employee(1,"abhi",20000));
            employeeList.add(new Employee(4,"abhi",30000));
            employeeList.add(new Employee(3,"abhi",40000));
            employeeList.add(new Employee(6,"abhi",23000));

 42. How can we use multiple DBs in springboot application

 43. How to handle exceptions in springboot applications

 44.List<String> list = Arrays.asList("ABC","HGDF","LKUI","KJHDFG");
    output :{3=[ABC], 4=[HGDF, LKUI], 6=[KJHDFG]}

 45. how reactjs fetch the java object data

    Spring Boot to create a RESTful web service that exposes your Java objects as JSON.
    Use the Fetch API or a library like Axios to make HTTP requests to your Java REST API.

    import React, { useEffect, useState } from 'react';

    function App() {
        const [data, setData] = useState(null);

        useEffect(() => {
            fetch('http://localhost:8080/api/data')
                .then(response => response.json())
                .then(data => setData(data))
                .catch(error => console.error('Error fetching data:', error));
        }, []);

 46. How to convert Yangs to java objects
    <build>
        <plugins>
            <plugin>
                <groupId>org.opendaylight.yangtools</groupId>
                <artifactId>yangtools-maven-plugin</artifactId>
                <version>2.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate-sources</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <sources>
                        <source>src/main/yang/example-module.yang</source>
                    </sources>
                </configuration>
            </plugin>
        </plugins>
    </build>

 47. Implement doublylinked list reverse method

 48. Change the values of Map with streams

 49.When we prefor TCP and when we prefor UDP

    When to Prefer TCP
    Reliability: TCP provides reliable data transfer with error checking and recovery. If your application requires guaranteed delivery of data, TCP is the better choice.
    Ordered Delivery: TCP ensures that data packets are delivered in the same order they were sent. This is crucial for applications where the order of data matters, such as file transfers or web browsing.
    Connection-Oriented: TCP establishes a connection before data transfer, ensuring a stable communication channel. This is important for applications that need a persistent connection, like email or remote server access (SSH).
    Flow Control and Congestion Control: TCP manages data flow and network congestion, making it suitable for applications that require smooth data transmission, such as streaming services.
    When to Prefer UDP
    Speed: UDP is faster than TCP because it has less overhead. It does not establish a connection or perform error checking, making it suitable for applications where speed is critical.
    Low Latency: UDP is ideal for real-time applications that require low latency, such as online gaming, VoIP (Voice over IP), and live video streaming.
    Broadcast and Multicast: UDP supports broadcasting and multicasting, making it suitable for applications that need to send data to multiple recipients simultaneously, like DNS queries or video conferencing.
    Simple Protocol: UDP is simpler and more efficient for applications that can tolerate some data loss, such as sensor data collection or logging.
    Summary
    Use TCP: When you need reliability, ordered delivery, and connection-oriented communication.
    Use UDP: When you need speed, low latency, and can tolerate some data loss.

 50. if microservice sends same request multiple times to other what will happen?
    1. Idempotent Operations
    If the receiving microservice's operation is idempotent, sending the same request multiple times will have the same effect as sending it once. Idempotent operations ensure that repeated requests do not cause unintended side effects.
    Example: Updating a user's profile information. If the same update request is sent multiple times, the user's profile will be updated to the same state each time.
    2. Non-Idempotent Operations
    If the operation is not idempotent, sending the same request multiple times can lead to unintended consequences, such as duplicate entries or inconsistent states.
    Example: Creating a new order. If the same order creation request is sent multiple times, it could result in multiple orders being created.

 51. Write a query to fetch the department-wise count of employees sorted by department’s count in ascending order.
    SELECT Department, COUNT(EmployeeID) AS EmployeeCount
    FROM Employees
    GROUP BY Department
    ORDER BY EmployeeCount ASC;
 52. Java Developer Interview Questions for Experienced
     hashtag#realtime hashtag#java hashtag#scenario hashtag#interview hashtag#questions
     1.     You need to prevent API abuse by implementing a rate limiter in Spring Boot.
     ·       How would you implement it?
     ·       Which algorithms would you use? (Token Bucket vs. Leaky Bucket)
     ·        How can Redis help in rate limiting?
     2.     Your system expects 1M+ requests per second during peak load.
     ·       How do you scale your system?
     ·       What caching mechanisms would you implement?
     ·       How do you handle sudden traffic spikes?

     3.     Users are uploading large files (1GB+), and the service is slowing down.

     ·       What’s the best way to handle file uploads efficiently?
     ·       Would you use S3, MinIO, or another storage solution?
     ·       How to implement a resumable upload?

     4.     Identify and fix the memory leak in the following code:
     class MemoryLeakExample {
      private static List<String> cache = new ArrayList<>();

      public void addData() {
      for (int i = 0; i < 1000000; i++) {
      cache.add("Data-" + i);
      }
      }
     }
     ·       What is wrong with this code?
     ·       How do you fix the memory leak?

     5.     The following code is not thread-safe. Why?

     class Counter {
      private int count = 0;

      public void increment() {
      count++;
      }
     }
     ·       What’s wrong with this implementation?
     ·       How would you make it thread-safe?

     6.     Your REST API is slow. Fix this code:

     @GetMapping("/users")
     public List<User> getAllUsers() {
      return userRepository.findAll();
     }
     ·       Why is this method slow for large datasets?
     ·       How can you optimize it using pagination?

 53. How Microservices register and communicate eachother
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    @SpringBootApplication
    @EnableEurekaServer
    public class EurekaServerApplication {
        public static void main(String[] args) {
            SpringApplication.run(EurekaServerApplication.class, args);
        }
    }

    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    @SpringBootApplication
    @EnableEurekaClient
    public class UserServiceApplication {
        public static void main(String[] args) {
            SpringApplication.run(UserServiceApplication.class, args);
        }
    }

 54. How consumers consume the kafka messages
    Subscribe to Topic: Use the subscribe method to specify the topic(s) you want to consume messages from.
    In this example, the consumer subscribes to the my-topic.

    Polling for Messages: Use the poll method to continuously fetch new messages. The poll method takes a Duration parameter,
     which specifies how long to wait for new messages.

 55. What are the directives available in JSP
    Page,Include,taglib

 56. About @Joincolumn in JPA
    @Entity
    public class Employee {

        @Id
        private Long id;

        @ManyToOne
        @JoinColumn(name = "department_id")
        private Department department;

        // Other fields, getters, and setters
    }

    @Entity
    public class Department {

        @Id
        private Long id;

        @OneToMany(mappedBy = "department")
        private List<Employee> employees;

        // Other fields, getters, and setters
    }
    The Employee entity has a ManyToOne relationship with the Department entity.
    The @JoinColumn annotation in the Employee entity specifies that the foreign key column in the Employee table will be department_id.

 57. @Version in JPA
    The @Version annotation marks a property as the version field, which is automatically updated by the persistence provider (e.g., Hibernate) whenever the entity is updated.

 58. What are the JPA methods
    1.Persist->void persist(Object entity);->Persists an entity into the database
    2.Find-><T> T find(Class<T> entityClass, Object primaryKey);->Finds an entity by its primary key
    3.Merge-><T> T merge(T entity);->Merges the state of the given entity into the current persistence context.
    4.Remove->void remove(Object entity);->Removes an entity from the database
    5.CreateQuery->Query createQuery(String qlString);->Creates a query from a JPQL string
    6.CreateNamedQuery->Query createNamedQuery(String name);->Creates a query using native SQL.
    7.Flush->void flush();->Synchronizes the persistence context to the underlying database.
    8.Clear->void clear();->Clears the persistence context, causing all managed entities to become detached
    9.GetTransaction->EntityTransaction getTransaction();

 59. Difference between CreateQuery and CreatedNamedQuery
    This method is used to create a dynamic query at runtime using JPQL (Java Persistence Query Language).
    Usage: The query string is passed directly to the createQuery method.

    This method is used to execute a named query that is predefined and annotated in the entity class or defined in a mapping file.
    Dynamic vs. Static:
    createQuery allows for dynamic query creation at runtime, while createNamedQuery uses predefined, static named queries.
    Flexibility vs. Reusability: createQuery offers more flexibility for dynamic queries, whereas createNamedQuery promotes reusability and consistency with named queries.

    String jpql = "SELECT p FROM Product p WHERE p.price > :price";
    Query query = entityManager.createQuery(jpql);
    query.setParameter("price", 100);
    List<Product> results = query.getResultList();

    @Entity
    @NamedQuery(name = "Product.findByPrice", query = "SELECT p FROM Product p WHERE p.price > :price")
    public class Product {}

 60. How to do serverside validations in springboot
        @NotBlank(message = "Name is mandatory")
        @Size(min = 2, max = 30, message = "Name must be between 2 and 30 characters")
        private String name;

        @Min(value = 18, message = "Age should not be less than 18")
        private int age;

 61. Mobile Networking
    Mobile Device → BTS/RBS → RNC → Core Network (MSC/SGSN/GGSN) → Backhaul Network → External Networks

 62. What is the difference between Virtual DOM and Real DOM in React
 63. Advantage of ReactJs
 64. what is the diff between props and state in React
 65. What is context API
 66. what is useEffect
 67. Which case we prefor scope: prototype
 68. How do we knew a Springboot application is a microservice
    @EnableEurekaClient
    public class Application {
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
    }
    or
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-gateway</artifactId>
    </dependency>
    or
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
    or
    @EnableCircuitBreaker
    public class Application {
        public static void main(String[] args) {
            SpringApplication.run(Application.class, args);
        }
    }
    or
    @EnableConfigServer
    public class ConfigServerApplication {
        public static void main(String[] args) {
            SpringApplication.run(ConfigServerApplication.class, args);
        }
    }

 69. How to define compositeKey in @Entity class
 70. What are the code review tools available >
    SonarQube,Jerrit(git), PVS Studio,Upsource

 71. @OneToOne in springboot

     @Entity
     public class User {
         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)
         private Long id;
         private String username;

         @OneToOne(cascade = CascadeType.ALL)
         @JoinColumn(name = "profile_id", referencedColumnName = "id")
         private Profile profile;
     }

     @Entity
     public class Profile {
         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)
         private Long id;
         private String firstName;
         private String lastName;

         @OneToOne(mappedBy = "profile")
         private User user;

         // Constructors, getters, and setters
     }

 72. @OneToMany mapping in springboot

     @Entity
     public class Author {
         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)
         private Long id;
         private String name;

         @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, orphanRemoval = true)
         private List<Book> books = new ArrayList<>();

         // Constructors, getters, and setters
     }

     @Entity
     public class Book {
         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)
         private Long id;
         private String title;

         @ManyToOne
         @JoinColumn(name = "author_id")
         private Author author;

         // Constructors, getters, and setters
     }

 73. @ManyToMany mapping in Springboot
    @Entity
    public class Student {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;

        @ManyToMany
        @JoinTable(
            name = "student_course",
            joinColumns = @JoinColumn(name = "student_id"),
            inverseJoinColumns = @JoinColumn(name = "course_id")
        )
        private Set<Course> courses = new HashSet<>();

        // Constructors, getters, and setters
    }

    @Entity
    public class Course {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;

        @ManyToMany(mappedBy = "courses")
        private Set<Student> students = new HashSet<>();

        // Constructors, getters, and setters
    }

 74. Frequently used kubctl commands
     kubectl cluster-info
        Kubernetes master is running at https://<master-ip>:<port>
        KubeDNS is running at https://<dns-ip>:<port>/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
        To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

        KubeDNS is a DNS server for a Kubernetes cluster.
        It is responsible for providing DNS-based service discovery and name resolution for the cluster.

     kubectl get nodes
        NAME           STATUS    ROLES     AGE       VERSION
        node-1         Ready     <none>    10d       v1.20.2
        node-2         Ready     <none>    10d       v1.20.2
        node-3         NotReady  <none>    10d       v1.20.2

        # Label a node as a master node
        kubectl label node master-node node-role.kubernetes.io/master=

        # Taint the master node to prevent workloads
        kubectl taint nodes master-node node-role.kubernetes.io/master=:NoSchedule

        # Label a node as a worker node
        kubectl label node worker-node node-role.kubernetes.io/worker=

        # Remove any taints from the worker node
        kubectl taint nodes worker-node node-role.kubernetes.io/worker:NoSchedule-

     kubectl get pods
        NAME                      READY   STATUS    RESTARTS   AGE
        nginx-deployment-6f7bd9d8b4-4g9xz   1/1     Running   0         2h
        nginx-deployment-6f7bd9d8b4-7jmtx   1/1     Running   0         2h

        kubectl describe pod nginx-deployment-6f7bd9d8b4-4g9xz (Specific)

     kubectl describe pod <pod-name>
     kubectl get services
        NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
        kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP        10d
        my-service   NodePort    10.96.0.2      <none>        8080:30001/TCP 5d

        TYPE: The type of the service (e.g., ClusterIP, NodePort, LoadBalancer)
        kubectl describe service my-service

     kubectl create -f <filename>
        Sure! The kubectl create -f <filename> command is used
        to create resources (such as pods, services, deployments, etc.) from a YAML or JSON file.

        kubectl create -f deployment.yaml
        O/P: deployment.apps/nginx-deployment created
        kubectl get deployments
        NAME              READY   UP-TO-DATE   AVAILABLE   AGE
        nginx-deployment  3/3     3            3           1m

     kubectl delete -f <filename>
        kubectl delete -f deployment.yaml

     kubectl apply -f <filename>
     kubectl scale deployment <deployment-name> --replicas=<number-of-replicas>

     kubectl logs <pod-name>
        kubectl logs my-pod

     kubectl exec -it <pod-name> -- /bin/bash
        kubectl exec -it my-pod -- /bin/bash

     kubectl port-forward <pod-name> <local-port>:<pod-port>
        kubectl port-forward my-pod 8080:80

     kubectl config set-context --current --namespace=<namespace>
     kubectl get all
        kubectl get all --all-namespaces

     kubectl delete pod -l <label-key>=<label-value>
        kubectl delete pod -l app=my-app

 75. What is N+1 problen in hibernate
    The N+1 problem is a performance issue that arises in object-relational mapping frameworks
    like Hibernate when retrieving associated entities. This problem occurs when an application
    makes one query to retrieve a list of parent entities (the "1" query), and for each parent entity,
     it makes an additional query to retrieve the associated child entities (the "N" queries).
     This results in a total of 1 + N queries, which can significantly degrade performance,
     especially with large datasets.

     @Entity
     public class Author {
         @Id
         private Long id;

         @OneToMany(mappedBy = "author")
         private List<Book> books;

         // Getters and setters
     }

     @Entity
     public class Book {
         @Id
         private Long id;

         @ManyToOne
         @JoinColumn(name = "author_id")
         private Author author;

         // Getters and setters
     }
   //
   List<Author> authors = entityManager.createQuery("SELECT a FROM Author a", Author.class).getResultList();
   for (Author author : authors) {
       List<Book> books = author.getBooks(); // Triggers a separate query for each author
   }

   Solution: FETCH JOIN
        List<Author> authors = entityManager.createQuery(
            "SELECT a FROM Author a JOIN FETCH a.books", Author.class).getResultList();

 76. How to create EntityManager Object in springboot

        @Service
        public class MyService {

            @PersistenceContext
            private EntityManager entityManager;

            @Transactional
            public void performSomeOperation() {
                // Use the entityManager for database operations
                // Example: entityManager.find(SomeEntity.class, id);
            }
        }

 77. How to handle large data in springboot application

 78. What is the diff between get() and load() in hibernate
     get() will immediately query the database and return the entity or null if it doesn't exist.
     load() will return a proxy object and only query the database when a method is called on the proxy.
     If the entity doesn't exist, it will throw an ObjectNotFoundException.

 79. List = {1,2,3,4,5} output = {1,3,6,10,15}
 80. list = {1,2,3,4,5,6} multiply all the elements in java 8
        list.stream().reduce(1,(a,b)->a*b)
 81. Docker commands:
        docker save -o   <output_file_name>.tar    <image_name> //import
        docker load -i <output_file_name>.tar //export
        docker rm <container-id> //removal
        //container running,paused,stopped
        docker ps -q | wc -l
        docker ps -q -f "status=paused"
        docker ps -q -aq -f "status=exited"

        //start , stop, kill
        docker start <container>
        docker stop <container>
        docker kill <container>

        docker logs <container_id>
        docker run --restart //container restarts itself

        docker run
        docker ps
        docker exec
        docker stop

        docker version //to know Docker client and server versions
        docker system prune //used to removal of unused data inclusion of stopped containers ,docker networks and

        docker-compose up --scale web=3 // will replecate web service in 3 instances

        docker run --restart no my_container // never restart
        docker run --restart on-failure:3 my_container //after 3 failures it will re-start
        docker run --restart always my_container

        docker inspect <image> //inspect meta-data

        docker run --cpus=3 -m  1024M   <image_name>

        docker exec -it <container_id> /bin/bash //
        docker exec -it <container_id> ps aux //running processes inside container
        docker exec -it <container_id> ping <hostname> //network connectivity to the host
        docker stats <containerID> //resource utilization

 82. String[] array = {"apple", "banana", "cherry", "date"}; sort based on length

 https://www.youtube.com/watch?v=aZA1m-CG9TY
